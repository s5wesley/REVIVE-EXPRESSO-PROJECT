pipeline {
    agent any

    options {
         buildDiscarder(logRotator(numToKeepStr: '7'))
         disableConcurrentBuilds()
         timeout(time: 60, unit: 'MINUTES')
         timestamps()
    }

     stages {
        stage('Login') {
            environment {
                DOCKERHUB_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage('test ui') {
            agent {
                docker {
                    image 'devopseasylearning/maven-revive:v1.0.0'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd S6-PROJECTS/REVIVE/src/ui
                    mvn test
                '''
            }
        }

        stage('test catalog') {
            agent {
                docker {
                    image 'devopseasylearning/golang02-revive:v1.0.0'
                    args '-u 0:0'
                }
            }
            steps {
                sh '''
                    cd S6-PROJECTS/REVIVE/src/catalog 
                    go test
                '''
            }
        }

        stage('test cart') {
            agent {
                docker {
                    image 'devopseasylearning/maven-revive:v1.0.0'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd S6-PROJECTS/REVIVE/src/cart
                    mvn test -DskipTests=true
                '''
            }
        }

        stage('test orders') {
            agent {
                docker {
                    image 'devopseasylearning/maven-revive:v1.0.0'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd S6-PROJECTS/REVIVE/src/orders
                    mvn test -DskipTests=true
                '''
            }
        }

        stage('test checkout') {
            agent {
                docker {
                    image 'devopseasylearning/nodejs01-revive:v1.0.0'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd S6-PROJECTS/REVIVE/src/checkout 
                    npm install 
                '''
            }
        }

        stage('Build ui') {
            steps {
                sh '''
                    cd $WORKSPACE/S6-PROJECTS/REVIVE/src/ui
                    docker build -t devopseasylearning/revive-ui:${BUILD_NUMBER}.1 .
                '''
            }
        }

        stage('Build catalog') {
            steps {
                sh '''
                    cd $WORKSPACE/S6-PROJECTS/REVIVE/src/catalog
                    docker build -t devopseasylearning/revive-catalog:${BUILD_NUMBER}.1 .
                    docker build -t devopseasylearning/revive-catalog-db:${BUILD_NUMBER}.1 -f Dockerfile-db .
                '''
            }
        }

        stage('Build cart') {
            steps {
                sh '''
                    cd $WORKSPACE/S6-PROJECTS/REVIVE/src/cart
                    docker build -t devopseasylearning/revive-cart:${BUILD_NUMBER}.1 .
                    docker build -t devopseasylearning/revive-cart-db:${BUILD_NUMBER}.1 -f Dockerfile-dynamodb .
                '''
            }
        }

        stage('Build orders') {
            steps {
                sh '''
                    cd $WORKSPACE/S6-PROJECTS/REVIVE/src/orders
                    docker build -t devopseasylearning/revive-orders:${BUILD_NUMBER}.1 .
                    docker build -t devopseasylearning/revive-orders-db:${BUILD_NUMBER}.1 -f Dockerfile-db .
                    docker build -t devopseasylearning/revive-orders-database-rabbitmq:${BUILD_NUMBER}.1 -f Dockerfile-rabbitmq .
                '''
            }
        }

        stage('Build checkout') {
            steps {
                sh '''
                    cd $WORKSPACE/S6-PROJECTS/REVIVE/src/checkout
                    docker build -t devopseasylearning/revive-checkout:${BUILD_NUMBER}.1 .
                    docker build -t devopseasylearning/revive-checkout-db:${BUILD_NUMBER}.1 -f Dockerfile-db .
                '''
            }
        }

        stage('Build assets') {
            steps {
                sh '''
                    cd $WORKSPACE/S6-PROJECTS/REVIVE/src/assets
                    docker build -t devopseasylearning/revive-assets:${BUILD_NUMBER}.1 .
                '''
            }
        }

        stage('Push ui') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/master'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/revive-ui:${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Push catalog') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/master'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/revive-catalog:${BUILD_NUMBER}.1
                    docker push devopseasylearning/revive-catalog-db:${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Push cart') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/master'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/revive-cart:${BUILD_NUMBER}.1
                    docker push devopseasylearning/revive-cart-db:${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Push orders') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/master'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/revive-orders:${BUILD_NUMBER}.1
                    docker push devopseasylearning/revive-orders-db:${BUILD_NUMBER}.1
                    docker push devopseasylearning/revive-orders-database-rabbitmq:${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Push checkout') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/master'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/revive-checkout:${BUILD_NUMBER}.1
                    docker push devopseasylearning/revive-checkout-db:${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Push assets') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/master'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/revive-assets:${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Deploy') {
            agent any
            steps {
                script {
                    sh '''
                        cat <<EOF>> docker-compose.yaml
      
                      version: '2.1'
                      services:
                      ui:
                      ports:
                        - 9998:8080
                        environment:
                        - JAVA_OPTS=-XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
                        - SERVER_TOMCAT_ACCESSLOG_ENABLED=true
                        - ENDPOINTS_CATALOG=http://catalog:8080
                        - ENDPOINTS_CARTS=http://carts:8080
                        - ENDPOINTS_ORDERS=http://orders:8080
                        - ENDPOINTS_CHECKOUT=http://checkout:8080
                        - ENDPOINTS_ASSETS=http://assets:8080
                        hostname: ui
                        image: devopseasylearning/revive-ui:01
                        restart: always
                        mem_limit: 512m
                        cap_drop:
                        - ALL
                        networks:
                        - s5wesley
                        depends_on:
                        - catalog
                        - carts
                        - orders
                        - checkout
                        - assets

                    catalog:
                        hostname: catalog
                        ports:
                        - "8080:8080"
                        image: devopseasylearning/revive-catalog:01
                        restart: always
                        environment:
                        - DB_ENDPOINT=catalog-db:3306
                        - DB_NAME=sampledb
                        - DB_USER=catalog_user
                        - GIN_MODE=release
                        - DB_MIGRATE=true
                        - DB_CONNECT_TIMEOUT=5
                        - PORT=8080
                        - DB_PASSWORD=testing
                        mem_limit: 128m
                        cap_drop:
                        - ALL
                        networks:
                        - s5wesley
                        depends_on:
                        - catalog-db

                    catalog-db:
                        image: mariadb:10.9
                        hostname: catalog-db
                        restart: always
                        environment:
                        - MYSQL_ROOT_PASSWORD=testing
                        - MYSQL_ALLOW_EMPTY_PASSWORD=true
                        - MYSQL_DATABASE=sampledb
                        - MYSQL_USER=catalog_user
                        - MYSQL_PASSWORD=testing 
                        mem_limit: 128m
                        networks:
                        - s5wesley

                    carts:
                        hostname: carts
                        image: devopseasylearning/revive-cart:01
                        restart: always
                        environment:
                        - JAVA_OPTS=-XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
                        - SERVER_TOMCAT_ACCESSLOG_ENABLED=true
                        - SPRING_PROFILES_ACTIVE=dynamodb
                        - CARTS_DYNAMODB_ENDPOINT=http://carts-db:8000
                        - CARTS_DYNAMODB_CREATETABLE=true
                        - AWS_ACCESS_KEY_ID=key
                        - AWS_SECRET_ACCESS_KEY=dummy
                        mem_limit: 256m
                        cap_drop:
                        - ALL
                        networks:
                        - s5wesley
                        depends_on:
                        - carts-db

                    carts-db:
                        image: amazon/dynamodb-local:1.20.0
                        hostname: carts-db
                        restart: always
                        mem_limit: 256m
                        networks:
                        - s5wesley

                    orders:
                        hostname: orders
                        image: devopseasylearning/revive-orders:01
                        restart: always
                        environment:
                        - JAVA_OPTS=-XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
                        - SERVER_TOMCAT_ACCESSLOG_ENABLED=true
                        - SPRING_PROFILES_ACTIVE=rabbitmq
                        - SPRING_DATASOURCE_URL=jdbc:postgresql://orders-db:5432/orders
                        - SPRING_DATASOURCE_USERNAME=orders_user
                        - SPRING_DATASOURCE_PASSWORD=testing
                        - SPRING_RABBITMQ_HOST=rabbitmq
                        mem_limit: 512m
                        cap_drop:
                        - ALL
                        networks:
                        - s5wesley
                        depends_on:
                        - rabbitmq
                        - orders-db
                        - checkout

                    orders-db:
                        image: postgres:16.1
                        hostname: orders-db
                        restart: always
                        security_opt: 
                        - "no-new-privileges:true"
                        environment:
                        - reschedule=on-node-failure
                        - POSTGRES_PASSWORD=testing
                        - POSTGRES_DB=orders
                        - POSTGRES_USER=orders_user
                        healthcheck:
                        test: ["CMD-SHELL", "pg_isready -d orders -U orders_user"]
                        interval: 10s
                        timeout: 5s
                        retries: 30
                        mem_limit: 128m
                        networks:
                        - s5wesley

                    checkout:
                        image: devopseasylearning/revive-checkout:01
                        hostname: checkout
                        restart: always
                        read_only: true
                        tmpfs:
                        - /tmp:rw,noexec,nosuid
                        environment:
                        - REDIS_URL=redis://checkout-redis:6379
                        - ENDPOINTS_ORDERS=http://orders:8080
                        mem_limit: 256m
                        cap_drop:
                        - ALL
                        networks:
                        - s5wesley
                        depends_on:
                        - checkout-redis

                    checkout-redis:
                        image: redis:6-alpine
                        hostname: checkout-redis
                        restart: always
                        mem_limit: 128m
                        networks:
                        - s5wesley

                    assets:
                        hostname: assets
                        environment:
                        - PORT=8080
                        image: devopseasylearning/revive-assets:01
                        restart: always
                        mem_limit: 64m
                        cap_drop:
                        - ALL
                        networks:
                        - s5wesley

                    rabbitmq:
                        image: rabbitmq:3-management
                        ports:
                        - "5999:5672"
                        - "15999:15672"
                        networks:
                        - s5wesley

                    networks:
                    s5wesley:
                        driver: bridge
                    EOF
                    '''
                    // Stop existing containers and remove orphans
                    sh 'docker-compose down --remove-orphans'
                    sh 'export COMPOSE_HTTP_TIMEOUT=400 && docker-compose -f docker-compose.yaml up -d'
                    sh 'sleep 120'
                    sh "docker-compose ps"
                    
                    def serverUrl = sh(script: "docker-compose -f docker-compose.yaml exec -T ui sh -c \"ip addr show eth0 | grep 'inet ' | awk '{print \$2}' | cut -d'/' -f1\"", returnStdout: true).trim()
                    echo "Application is running at http://${serverUrl}:9998"
                }
            }
        }

        stage('Post Build') {
            steps {
                    script {
                        slackSend color: '#2EB67D',
                        channel: 'general', 
                        message: "*Revive Project Build Status*" +
                            "\n Project Name: s5wesley-REVIVE" +
                            "\n Job Name: ${env.JOB_NAME}" +
                            "\n Build number: ${currentBuild.displayName}" +
                            "\n Build Status : *SUCCESS*" +
                            "\n Build url : ${env.BUILD_URL}"
                    }
                }
                failure {
                    script {
                        slackSend color: '#E01E5A',
                        channel: 'general',  
                        message: "*Revive Project Build Status*" +
                            "\n Project Name: s5wesley-REVIVE" +
                            "\n Job Name: ${env.JOB_NAME}" +
                            "\n Build number: ${currentBuild.displayName}" +
                            "\n Build Status : *FAILED*" +
                            "\n Build url : ${env.BUILD_URL}"
                    }
                }
            }
        }
    }
