pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '7'))
        disableConcurrentBuilds()
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }

    stages {
        stage('Login') {
            environment {
                DOCKERHUB_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage('test ui') {
            agent {
                docker {
                    image 'devopseasylearning/maven-revive:v1.0.0'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd S6-PROJECTS/REVIVE/src/ui
                    mvn test
                '''
            }
        }

        stage('test catalog') {
            agent {
                docker {
                    image 'devopseasylearning/golang02-revive:v1.0.0'
                    args '-u 0:0'
                }
            }
            steps {
                sh '''
                    cd S6-PROJECTS/REVIVE/src/catalog 
                    go test
                '''
            }
        }

        stage('test cart') {
            agent {
                docker {
                    image 'devopseasylearning/maven-revive:v1.0.0'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd S6-PROJECTS/REVIVE/src/cart
                    mvn test -DskipTests=true
                '''
            }
        }

        stage('test orders') {
            agent {
                docker {
                    image 'devopseasylearning/maven-revive:v1.0.0'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd S6-PROJECTS/REVIVE/src/orders
                    mvn test -DskipTests=true
                '''
            }
        }

        stage('test checkout') {
            agent {
                docker {
                    image 'devopseasylearning/nodejs01-revive:v1.0.0'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd S6-PROJECTS/REVIVE/src/checkout 
                    npm install 
                '''
            }
        }

        stage('Build ui') {
            steps {
                sh '''
                    cd $WORKSPACE/S6-PROJECTS/REVIVE/src/ui
                    docker build -t devopseasylearning/revive-ui:${BUILD_NUMBER}.1 .
                '''
            }
        }

        stage('Build catalog') {
            steps {
                sh '''
                    cd $WORKSPACE/S6-PROJECTS/REVIVE/src/catalog
                    docker build -t devopseasylearning/revive-catalog:${BUILD_NUMBER}.1 .
                    docker build -t devopseasylearning/revive-catalog-db:${BUILD_NUMBER}.1 -f Dockerfile-db .
                '''
            }
        }

        stage('Build cart') {
            steps {
                sh '''
                    cd $WORKSPACE/S6-PROJECTS/REVIVE/src/cart
                    docker build -t devopseasylearning/revive-cart:${BUILD_NUMBER}.1 .
                    docker build -t devopseasylearning/revive-cart-db:${BUILD_NUMBER}.1 -f Dockerfile-dynamodb .
                '''
            }
        }

        stage('Build orders') {
            steps {
                sh '''
                    cd $WORKSPACE/S6-PROJECTS/REVIVE/src/orders
                    docker build -t devopseasylearning/revive-orders:${BUILD_NUMBER}.1 .
                    docker build -t devopseasylearning/revive-orders-db:${BUILD_NUMBER}.1 -f Dockerfile-db .
                    docker build -t devopseasylearning/revive-orders-database-rabbitmq:${BUILD_NUMBER}.1 -f Dockerfile-rabbitmq .
                '''
            }
        }

        stage('Build checkout') {
            steps {
                sh '''
                    cd $WORKSPACE/S6-PROJECTS/REVIVE/src/checkout
                    docker build -t devopseasylearning/revive-checkout:${BUILD_NUMBER}.1 .
                    docker build -t devopseasylearning/revive-checkout-db:${BUILD_NUMBER}.1 -f Dockerfile-db .
                '''
            }
        }

        stage('Build assets') {
            steps {
                sh '''
                    cd $WORKSPACE/S6-PROJECTS/REVIVE/src/assets
                    docker build -t devopseasylearning/revive-assets:${BUILD_NUMBER}.1 .
                '''
            }
        }

        stage('Push ui') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/master'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/revive-ui:${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Push catalog') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/master'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/revive-catalog:${BUILD_NUMBER}.1
                    docker push devopseasylearning/revive-catalog-db:${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Push cart') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/master'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/revive-cart:${BUILD_NUMBER}.1
                    docker push devopseasylearning/revive-cart-db:${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Push orders') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/master'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/revive-orders:${BUILD_NUMBER}.1
                    docker push devopseasylearning/revive-orders-db:${BUILD_NUMBER}.1
                    docker push devopseasylearning/revive-orders-database-rabbitmq:${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Push checkout') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/master'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/revive-checkout:${BUILD_NUMBER}.1
                    docker push devopseasylearning/revive-checkout-db:${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Push assets') {
            when {
                expression {
                    env.GIT_BRANCH == 'origin/master'
                }
            }
            steps {
                sh '''
                    docker push devopseasylearning/revive-assets:${BUILD_NUMBER}.1
                '''
            }
        }

        stage('Deploy') {
            agent any
            steps {
                script {
                    sh '''
                        cat <<EOF>> docker-compose.yaml
version: '2.1'
services:
  ui:
    ports:
      - 9998:8080
    environment:
      - JAVA_OPTS=-XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
      - SERVER_TOMCAT_ACCESSLOG_ENABLED=true
      - ENDPOINTS_CATALOG=http://catalog:8080
      - ENDPOINTS_CARTS=http://carts:8080
      - ENDPOINTS_ORDERS=http://orders:8080
      - ENDPOINTS_CHECKOUT=http://checkout:8080
      - ENDPOINTS_ASSETS=http://assets:8080
    hostname: ui
    image: devopseasylearning/revive-ui:01
    restart: always
    mem_limit: 512m
    cap_drop:
      - ALL
    networks:
      - s5wesley
    depends_on:
      - catalog
      - carts
      - orders
      - checkout
      - assets

  // Other services...

networks:
  s5wesley:
    driver: bridge
EOF
                    '''
                    // Stop existing containers and remove orphans
                    sh 'docker-compose down --remove-orphans'
                    sh 'export COMPOSE_HTTP_TIMEOUT=400 && docker-compose -f docker-compose.yaml up -d'
                    sh 'sleep 120'
                    sh "docker-compose ps"
                    
                    def serverUrl = sh(script: "docker-compose -f docker-compose.yaml exec -T ui sh -c \"ip addr show eth0 | grep 'inet ' | awk '{print \$2}' | cut -d'/' -f1\"", returnStdout: true).trim()
                    echo "Application is running at http://${serverUrl}:9998"
                }
            }
            post {
                always {
                    success {
                        slackSend color: '#2EB67D',
                        channel: 'general', 
                        message: "*Revive Project Build Status*" +
                            "\n Project Name: s5wesley-REVIVE" +
                            "\n Job Name: ${env.JOB_NAME}" +
                            "\n Build number: ${currentBuild.displayName}" +
                            "\n Build Status : *SUCCESS*" +
                            "\n Build url : ${env.BUILD_URL}"
                    }
                    failure {
                        slackSend color: '#E01E5A',
                        channel: 'general',  
                        message: "*Revive Project Build Status*" +
                            "\n Project Name: s5wesley-REVIVE" +
                            "\n Job Name: ${env.JOB_NAME}" +
                            "\n Build number: ${currentBuild.displayName}" +
                            "\n Build Status : *FAILED*" +
                            "\n Build url : ${env.BUILD_URL}"
                    }
                }
            }
        }
    }
}
